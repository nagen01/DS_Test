# -*- coding: utf-8 -*-
"""DS_Test_1 & 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10WtWo5x1cR81c_zF0DJeggvwD4tmDoOb

Q1: GIVEN AN ARRAY OF INTEGERS, WRITE A PROGRAM TO FIND THE LARGEST
NUMBER AND THE SMALLEST NUMBER.
Instructions:
1. Write the program in python. Do not use sort method.
2. Write at least three test cases for the program.
"""

def findMax(array):
  max_value = array[0]
  for i in range(len(array)):
    if max_value < array[i]:
      max_value = array[i]
  return max_value

def findMin(array):
  min_value = array[0]
  for i in range(len(array)):
    if min_value > array[i]:
      min_value = array[i]
  return min_value

#Test Cases:
#1 : Recognize +ve and -ve numbers
a = [2,5,7,9,-7,4,6,3,-10,1,11,12,15]
min_value = findMin(a)
print(min_value)
max_value = findMax(a)
print(max_value)

#2 : Produce result even if all numbers are same
a = [2,2,2,2,2,2,2,2,2]
min_value = findMin(a)
print(min_value)
max_value = findMax(a)
print(max_value)

#3 : Handels simple calculations 
a = [2,5,7,9,4,2**10,6,3,1,11,12,15]
min_value = findMin(a)
print(min_value)
max_value = findMax(a)
print(max_value)

"""Q2: GIVEN AN ARRAY OF STRINGS, FOR EVERY STRING IN THE LIST FIND ALL
STRINGS THAT HAVE EDIT DISTANCE LESS THAN A GIVEN THRESHOLD (SAY 2).
Instructions:
• Write the program in python.
• Do not use any python or third party library.
"""

def getEditDistance(str1, str2, m, n): 
  
    # If first string is empty: first string can be converted into second string by coppying each characters from second to first string
    #Hence edit distance will be as below
    if m == 0: 
         return n 
  
    # If second string is empty: first string can be converted into second string by removing each characters from first string
    #Hence edit distance will be as below
    if n == 0: 
        return m 
  
    # If last characters of both strings are same, Ignore last characters and get count for the remanining string lengths
    if str1[m-1]== str2[n-1]: 
        return getEditDistance(str1, str2, m-1, n-1) 
  
    # If last characters are not same, recursively compute minimum cost for all three operations (Insert/Remove/Replace) on last character
    # of first string and take minimum of three values. 
    return 1 + findMin([getEditDistance(str1, str2, m, n-1), getEditDistance(str1, str2, m-1, n), getEditDistance(str1, str2, m-1, n-1)]) 

def getEditDistanceStrings(strs, ed_distance):
  d = {}
  for i in range(len(strs)):
    lst = []
    str1 = strs[i]
    for j in range(len(strs)):
      str2 = strs[j]
      if i != j:
        ed = ed = getEditDistance(str1, str2, len(str1), len(str2))
        if ed <= ed_distance:
          #print(ed)
          lst.append(strs[j])
        d[strs[i]] = lst
  return d
#strs = ["sunday", "saturday"]
strs = ["sunday", "saturday", "monday", "tuesday", "wednesday", "thursday", "friday"]
#strs = ["january", "february", "march", "april", "may", "june", "july", "august", "september", "october", "november", "december"]
ed_distance = 3
string_dict = getEditDistanceStrings(strs, ed_distance)
print(f"Find list of strings which have edit distance less than or equals to {ed_distance}: ")
print(string_dict)